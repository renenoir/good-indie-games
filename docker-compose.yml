version: "3.7"

services:
  web:
    container_name: web
    build:
      context: ./web
      dockerfile: Dockerfile
    volumes:
      - './web:/app'
      - '/app/node_modules'
    ports:
      - 3001:3000
    environment:
      - CHOKIDAR_USEPOLLING=true  
    networks:
      - app-network
  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./api/app:/app
    command: >
      sh -c "python manage.py wait_for_db &&
              python manage.py migrate &&
              (python manage.py runserver 0.0.0.0:8000 &
              (watch -n 43200 python manage.py update_db))"
    environment:
      - DB_HOST=db
      - DB_NAME=app
      - DB_USER=postgres
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    networks:
      - app-network
    depends_on:
      - db
  db:
    container_name: db
    image: postgres:10-alpine
    volumes:
      - dbdata:/var/lib/postgresql/data/
    networks:
      - app-network
    environment: 
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
volumes:
  dbdata:
networks:
  app-network:
    driver: bridge